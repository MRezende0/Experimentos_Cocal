import os
import ssl
import time
from datetime import datetime, timedelta
from random import uniform

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from google.oauth2 import service_account
import streamlit.components.v1 as components

if 'local_data' not in st.session_state:
    st.session_state.local_data = {
        "quimicos": pd.DataFrame(),
        "biologicos": pd.DataFrame(),
        "resultados": pd.DataFrame(),
        "solicitacoes": pd.DataFrame()
    }

# Configura√ß√µes iniciais
st.set_page_config(
    page_title="Experimentos",
    page_icon="üß™",
    layout="wide"
)

# Estilos CSS personalizados
def local_css():
    st.markdown("""
        <style>
            [data-testid="stSidebar"] {
                background-color: #f8f9fa;
                padding: 20px;
            }
            h1, h2, h3 {
                color: #2c3e50;
                font-weight: bold;
            }
            .card {
                background-color: #ffffff;
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                margin: 10px;
                text-align: center;
            }
            .resultado {
                padding: 20px;
                border-radius: 5px;
                margin: 20px 0;
                text-align: center;
                font-size: 24px;
            }
            .compativel {
                background-color: #90EE90;
                color: #006400;
            }
            .incompativel {
                background-color: #FFB6C1;
                color: #8B0000;
            }
            /* Estabilizar tabelas */
            [data-testid="stDataFrame"], [data-testid="stTable"], [data-testid="stDataEditor"] {
                width: 100% !important;
                min-height: 400px;
                height: auto !important;
                max-height: none !important;
                transform: none !important;
                transition: none !important;
            }
            /* Reduzir espa√ßo entre tabelas e bot√µes */
            .stButton {
                margin-top: 0px;
            }
            /* Corrigir problemas de renderiza√ß√£o em tabelas edit√°veis */
            [data-testid="stDataEditor"] [data-testid="column"] {
                overflow: visible !important;
            }
            [data-testid="stDataEditor"] [data-testid="dataframe-cell-input"] {
                min-height: 32px !important;
            }
            [data-testid="stDataEditor"] [data-testid="dataframe-add-rows"] {
                margin-top: 8px !important;
            }
            /* Otimiza√ß√µes de performance */
            .stApp {
                background-color: #ffff;
            }
            /* Reduzir anima√ß√µes para melhorar performance */
            * {
                transition-duration: 0s !important;
                animation-duration: 0s !important;
            }
            /* Melhorar performance de tabelas grandes */
            .stDataFrame {
                max-height: 600px;
                overflow-y: auto;
            }
        </style>
    """, unsafe_allow_html=True)

local_css()

########################################## CONEX√ÉO GOOGLE SHEETS ##########################################

SHEET_ID = "1lILLXICVkVekkm2EZ-20cLnkYFYvHnb14NL_Or7132U"
SHEET_GIDS = {
    "Resultados": "0",
    "Quimicos": "885876195",
    "Biologicos": "1440941690",
    "Solicitacoes": "1408097520"
}

COLUNAS_ESPERADAS = {
    "Quimicos": ["Nome", "Tipo", "Fabricante", "Concentracao", "Classe", "ModoAcao"],
    "Biologicos": ["Nome", "Tipo", "IngredienteAtivo", "Formulacao", "Aplicacao", "Validade"],
    "Resultados": ["Data", "Quimico", "Biologico", "Duracao", "Tipo", "Resultado"],
    "Solicitacoes": ["Data", "Solicitante", "Quimico", "Biologico", "Observacoes", "Status"]
}

@st.cache_resource
def get_google_sheets_client():
    try:
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        
        credentials_dict = dict(st.secrets["GOOGLE_CREDENTIALS"])
        creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
        client = gspread.authorize(creds)
        
        if hasattr(client, 'session'):
            client.session.verify = False
            
        return client
    except Exception as e:
        st.error(f"Erro na conex√£o: {str(e)}")
        return None

def get_worksheet(sheet_name: str):
    def _get_worksheet():
        try:
            client = get_google_sheets_client()
            if client is None:
                st.error("Erro ao conectar com Google Sheets. Tente novamente mais tarde.")
                return None
                
            spreadsheet = client.open_by_key(SHEET_ID)
            worksheet = spreadsheet.worksheet(sheet_name)
            return worksheet
        except Exception as e:
            st.error(f"Erro ao acessar planilha {sheet_name}: {str(e)}")
            return None
            
    return retry_with_backoff(_get_worksheet, max_retries=5, initial_delay=2)

def retry_with_backoff(func, max_retries=5, initial_delay=1):
    """
    Executa uma fun√ß√£o com retry e exponential backoff
    
    Args:
        func: Fun√ß√£o a ser executada
        max_retries: N√∫mero m√°ximo de tentativas
        initial_delay: Delay inicial em segundos
        
    Returns:
        Resultado da fun√ß√£o ou None se falhar
    """
    for attempt in range(max_retries):
        try:
            return func()
        except Exception as e:
            if "Quota exceeded" not in str(e):
                st.error(f"Erro inesperado: {str(e)}")
                return None
                
            if attempt == max_retries - 1:
                st.error("Limite de tentativas excedido. Tente novamente mais tarde.")
                return None
                
            # Exponential backoff com jitter
            delay = initial_delay * (2 ** attempt) + uniform(0, 1)
            time.sleep(delay)
            
            # Informar usu√°rio sobre retry
            st.warning(f"Limite de requisi√ß√µes atingido. Tentando novamente em {delay:.1f} segundos...")
            
    return None

def append_to_sheet(data_dict, sheet_name):
    """
    Adiciona uma nova linha de dados √† planilha especificada.
    
    Args:
        data_dict (dict): Dicion√°rio com os dados a serem adicionados
        sheet_name (str): Nome da planilha onde adicionar os dados
        
    Returns:
        bool: True se a opera√ß√£o foi bem-sucedida, False caso contr√°rio
    """
    def _append(data_dict=data_dict, sheet_name=sheet_name):
        try:
            # Obter a planilha
            sheet = get_worksheet(sheet_name)
            if not sheet:
                st.error(f"Planilha '{sheet_name}' n√£o encontrada.")
                return False
            
            # Verificar se h√° dados para adicionar
            if not data_dict:
                st.error("Nenhum dado para adicionar.")
                return False
            
            # Adicionar os dados √† planilha
            sheet.append_row(list(data_dict.values()))
            return True
            
        except Exception as e:
            st.error(f"Erro ao adicionar dados: {str(e)}")
            return False
            
    return retry_with_backoff(_append, max_retries=3, initial_delay=2)

def load_sheet_data(sheet_name: str) -> pd.DataFrame:
    def _load(sheet_name=sheet_name):
        try:
            worksheet = get_worksheet(sheet_name)
            if worksheet is None:
                st.warning(f"Planilha {sheet_name} n√£o encontrada")
                return pd.DataFrame()
            
            try:
                data = worksheet.get_all_records()
                if not data:
                    st.warning(f"A planilha {sheet_name} est√° vazia")
                    return pd.DataFrame()
            except gspread.exceptions.APIError as e:
                st.error(f"Erro na API: {str(e)}")
                return pd.DataFrame()

            # Converter para DataFrame com tratamento de erros
            df = pd.DataFrame(data)
            
            # Verificar colunas essenciais
            required_columns = {
                "Quimicos": ["Nome", "Tipo"],
                "Biologicos": ["Nome", "Tipo"],
                "Resultados": ["Quimico", "Biologico"],
                "Solicitacoes": ["Quimico", "Biologico"]
            }
            
            if sheet_name in required_columns:
                for col in required_columns[sheet_name]:
                    if col not in df.columns:
                        st.error(f"Coluna obrigat√≥ria '{col}' n√£o encontrada em {sheet_name}")
                        return pd.DataFrame()
            return df

        except Exception as e:
            st.error(f"Erro cr√≠tico ao carregar {sheet_name}: {str(e)}")
            return pd.DataFrame()
        
    return retry_with_backoff(_load)

def update_sheet(df: pd.DataFrame, sheet_name: str) -> bool:
    """
    Atualiza uma planilha no Google Sheets e tamb√©m atualiza o cache local
    """
    try:
        worksheet = get_worksheet(sheet_name)
        if worksheet is None:
            st.error(f"N√£o foi poss√≠vel acessar a planilha {sheet_name}")
            return False
            
        # Verificar se o DataFrame est√° vazio
        if df.empty:
            st.error(f"DataFrame vazio para {sheet_name}")
            return False
            
        # Converter colunas datetime para string
        df_copy = df.copy()
        for col in df_copy.columns:
            if df_copy[col].dtype == 'datetime64[ns]':
                df_copy[col] = df_copy[col].dt.strftime('%Y-%m-%d')
                
        # Preparar dados para atualiza√ß√£o
        header = df_copy.columns.tolist()
        values = df_copy.values.tolist()
        all_values = [header] + values
        
        # Usar batch_update para melhorar a performance
        worksheet.clear()
        # Corrigir o erro de atualiza√ß√£o especificando a c√©lula inicial 'A1'
        worksheet.update('A1', all_values)
        
        # Atualizar o cache local
        st.session_state.local_data[sheet_name.lower()] = df
        
        return True
    except Exception as e:
        st.error(f"Erro ao atualizar planilha {sheet_name}: {str(e)}")
        return False

def load_all_data():
    """
    Carrega todos os dados das planilhas e armazena na session_state
    Usa cache de sess√£o para minimizar requisi√ß√µes ao Google Sheets
    """
    # Verificar se os dados j√° est√£o na sess√£o e se foram carregados h√° menos de 5 minutos
    if 'data_timestamp' in st.session_state and 'local_data' in st.session_state:
        elapsed_time = (datetime.now() - st.session_state.data_timestamp).total_seconds()
        # Usar dados em cache se foram carregados h√° menos de 5 minutos
        if elapsed_time < 300:  # 5 minutos em segundos
            return st.session_state.local_data
    
    # Carregar dados com paralelismo para melhorar a performance
    with st.spinner("Carregando dados..."):
        # Inicializar dicion√°rio de dados
        dados = {}
        
        # Definir fun√ß√£o para carregar uma planilha espec√≠fica
        def load_sheet(sheet_name):
            return sheet_name, _load_and_validate_sheet(sheet_name)
        
        # Usar threads para carregar as planilhas em paralelo
        import concurrent.futures
        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
            # Submeter tarefas para carregar cada planilha
            futures = {executor.submit(load_sheet, name): name for name in ["Quimicos", "Biologicos", "Resultados", "Solicitacoes"]}
            
            # Coletar resultados √† medida que ficam dispon√≠veis
            for future in concurrent.futures.as_completed(futures):
                sheet_name, df = future.result()
                dados[sheet_name.lower()] = df
    
    # Armazenar dados na sess√£o com timestamp
    st.session_state.local_data = dados
    st.session_state.data_timestamp = datetime.now()
    
    return dados

def _load_and_validate_sheet(sheet_name):
    try:
        df = load_sheet_data(sheet_name)
        
        if df.empty:
            return pd.DataFrame()
        
        # Verificar coluna Nome
        if sheet_name in ["Quimicos", "Biologicos"] and "Nome" not in df.columns:
            st.error(f"Coluna 'Nome' n√£o encontrada em {sheet_name}")
            return pd.DataFrame()
            
        # Remover linhas com Nome vazio para planilhas que exigem Nome
        if sheet_name in ["Quimicos", "Biologicos"] and "Nome" in df.columns:
            df = df[df["Nome"].notna()]
        
        # Converter colunas de data
        if sheet_name in ["Resultados", "Solicitacoes"] and "Data" in df.columns:
            df["Data"] = pd.to_datetime(df["Data"], errors='coerce')
        
        return df
        
    except Exception as e:
        st.error(f"Falha cr√≠tica ao carregar {sheet_name}: {str(e)}")
        return pd.DataFrame()

########################################## COMPATIBILIDADE ##########################################

def compatibilidade():
    # Inicializar vari√°vel de estado para controle do formul√°rio
    if 'solicitar_novo_teste' not in st.session_state:
        st.session_state.solicitar_novo_teste = False
    if 'pre_selecionado_quimico' not in st.session_state:
        st.session_state.pre_selecionado_quimico = None
    if 'pre_selecionado_biologico' not in st.session_state:
        st.session_state.pre_selecionado_biologico = None
    if 'just_submitted' not in st.session_state:
        st.session_state.just_submitted = False
    if 'last_submission' not in st.session_state:
        st.session_state.last_submission = None
    
    col1, col2 = st.columns([4, 1])  # 4:1 ratio para alinhamento direito

    with col1:
        st.title("üß™ Compatibilidade")

    with col2:
        # Container com alinhamento √† direita
        st.markdown(
            """
            <div style='display: flex;
                        justify-content: flex-end;
                        align-items: center;
                        height: 100%;'>
            """,
            unsafe_allow_html=True
        )
        
        if st.button("Solicitar Novo Teste", key="btn_novo_teste", use_container_width=True):
            # Limpar estados anteriores para garantir um novo formul√°rio
            if 'form_submitted' in st.session_state:
                st.session_state.form_submitted = False
            if 'form_success' in st.session_state:
                st.session_state.form_success = False
            if 'last_submission' in st.session_state:
                st.session_state.last_submission = None
            st.session_state.solicitar_novo_teste = True
            st.session_state.pre_selecionado_quimico = None
            st.session_state.pre_selecionado_biologico = None
            
        st.markdown("</div>", unsafe_allow_html=True)
    
    dados = load_all_data()
    
    # Verifica√ß√£o detalhada dos dados
    if dados["quimicos"].empty:
        st.warning("""
            **Nenhum produto qu√≠mico cadastrado!**
            Por favor:
            1. Verifique a planilha 'Quimicos' no Google Sheets
            2. Confira se h√° dados na planilha
            3. Verifique as permiss√µes de acesso
        """)
        return

    if dados["biologicos"].empty:
        st.warning("""
            **Nenhum produto biol√≥gico cadastrado!**
            Por favor:
            1. Verifique a planilha 'Biologicos' no Google Sheets
            2. Confira se h√° dados na planilha
            3. Verifique as permiss√µes de acesso
        """)
        return
    
    # Verificar se o bot√£o de novo teste foi pressionado
    if 'solicitar_novo_teste' in st.session_state and st.session_state.solicitar_novo_teste:
        st.session_state.solicitar_novo_teste = False
        mostrar_formulario_solicitacao(
            quimico=st.session_state.pre_selecionado_quimico,
            biologico=st.session_state.pre_selecionado_biologico
        )
        return  # Importante: retornar para n√£o mostrar o restante da interface
    
    # Interface de consulta de compatibilidade
    col1, col2 = st.columns([1, 1])
    with col1:
        quimico = st.selectbox(
            "Produto Qu√≠mico",
            options=sorted(dados["quimicos"]['Nome'].unique()) if not dados["quimicos"].empty and 'Nome' in dados["quimicos"].columns else [],
            index=None,
            key="compatibilidade_quimico"
        )
    
    with col2:
        biologico = st.selectbox(
            "Produto Biol√≥gico",
            options=sorted(dados["biologicos"]['Nome'].unique()) if not dados["biologicos"].empty and 'Nome' in dados["biologicos"].columns else [],
            index=None,
            key="compatibilidade_biologico"
        )
    
    if quimico and biologico:
        # Procurar na planilha de Resultados usando os nomes
        resultado_existente = dados["resultados"][
            (dados["resultados"]["Quimico"] == quimico) &
            (dados["resultados"]["Biologico"] == biologico)
        ]
        
        if not resultado_existente.empty:
            resultado = resultado_existente.iloc[0]['Resultado']
            classe = "compativel" if resultado == "Compat√≠vel" else "incompativel"
            st.markdown(f"""
                <div class="resultado {classe}">
                    {resultado}
                </div>
            """, unsafe_allow_html=True)
            
            # Mostrar detalhes do teste
            with st.expander("Ver detalhes do teste"):
                st.write(f"**Data:** {resultado_existente.iloc[0]['Data']}")
                st.write(f"**Quimico:** {resultado_existente.iloc[0]['Quimico']}")
                st.write(f"**Biologico:** {resultado_existente.iloc[0]['Biologico']}")
                st.write(f"**Tipo:** {resultado_existente.iloc[0]['Tipo']}")
                st.write(f"**Dura√ß√£o:** {resultado_existente.iloc[0]['Duracao']} horas")
                st.write(f"**Resultado:** {resultado_existente.iloc[0]['Resultado']}")
        
        else:
            # Mostrar aviso de que n√£o existe compatibilidade cadastrada
            st.warning(f"""
                **Teste n√£o realizado!**
                
                Solicite um novo teste.
            """)
            
    # Fun√ß√£o auxiliar para mostrar o formul√°rio de solicita√ß√£o
def mostrar_formulario_solicitacao(quimico=None, biologico=None):
    # Inicializar vari√°veis de estado se n√£o existirem
    if 'form_submitted' not in st.session_state:
        st.session_state.form_submitted = False
    if 'form_success' not in st.session_state:
        st.session_state.form_success = False
    if 'last_submission' not in st.session_state:
        st.session_state.last_submission = None
    if 'just_submitted' not in st.session_state:
        st.session_state.just_submitted = False
    
    # Fun√ß√£o para processar o envio do formul√°rio
    def submit_form():
        # Obter valores do formul√°rio
        data = st.session_state.data_solicitacao
        solicitante = st.session_state.solicitante
        quimico_input = st.session_state.quimico_input
        biologico_input = st.session_state.biologico_input
        observacoes = st.session_state.observacoes
        
        # Validar campos obrigat√≥rios
        if not quimico_input or not biologico_input or not solicitante:
            st.session_state.form_submitted = True
            st.session_state.form_success = False
            return
        
        # Preparar dados da solicita√ß√£o
        nova_solicitacao = {
            "Data": data.strftime("%Y-%m-%d"),
            "Solicitante": solicitante,
            "Quimico": quimico_input,
            "Biologico": biologico_input,
            "Observacoes": observacoes,
            "Status": "Pendente"
        }
        
        # Tentar salvar no Google Sheets
        if append_to_sheet(nova_solicitacao, "Solicitacoes"):
            st.session_state.last_submission = nova_solicitacao
            st.session_state.just_submitted = True  # Ativa flag
            return
        else:
            st.session_state.form_submitted = True
            st.session_state.form_success = False
    
    # Mostrar o formul√°rio para entrada de dados
    st.subheader("Solicitar Novo Teste")
    
    # Valores iniciais para os campos
    default_quimico = quimico if quimico else ""
    default_biologico = biologico if biologico else ""
    
    # Usar st.form para evitar recarregamentos
    with st.form(key="solicitar_teste_form"):
        st.date_input("Data da Solicita√ß√£o", value=datetime.now(), key="data_solicitacao")
        st.text_input("Nome do solicitante", key="solicitante")
        
        # Usar campos de texto para permitir novos produtos
        st.text_input("Nome do Produto Qu√≠mico", value=default_quimico, key="quimico_input")
        st.text_input("Nome do Produto Biol√≥gico", value=default_biologico, key="biologico_input")
        
        st.text_area("Observa√ß√µes", key="observacoes")
        
        # Bot√£o de submit
        submitted = st.form_submit_button("Solicitar Teste", on_click=submit_form)
    
    # Exibir mensagem de sucesso se acabou de enviar uma solicita√ß√£o
    if st.session_state.just_submitted and st.session_state.last_submission:
        success_container = st.container()
        with success_container:
            st.success("Solicita√ß√£o de novo teste registrada com sucesso!")
        
        # Mostrar detalhes da √∫ltima submiss√£o
        with st.expander("Ver detalhes da solicita√ß√£o"):
            for key, value in st.session_state.last_submission.items():
                st.write(f"**{key}:** {value}")
        
        # Limpar o estado ap√≥s exibir a mensagem
        if st.button("Fechar", key="btn_fechar_mensagem_sucesso"):
            st.session_state.just_submitted = False
            st.session_state.last_submission = None
            st.experimental_rerun()
    else:
        st.error("Por favor, preencha todos os campos obrigat√≥rios: Produto Qu√≠mico, Produto Biol√≥gico e Solicitante.")

########################################## GERENCIAMENTO ##########################################

def gerenciamento():
    st.title("‚öôÔ∏è Gerenciamento")

    if 'edited_data' not in st.session_state:
        st.session_state.edited_data = {
            "quimicos": False,
            "biologicos": False,
            "resultados": False,
            "solicitacoes": False
        }
    
    # Inicializar dados locais se n√£o existirem na sess√£o
    if 'local_data' not in st.session_state:
        st.session_state.local_data = load_all_data()
    
    # Usar dados da sess√£o em vez de recarregar a cada intera√ß√£o
    dados = st.session_state.local_data
    
    tab1, tab2, tab3, tab4 = st.tabs(["Quimicos", "Biologicos", "Compatibilidades", "Solicita√ß√µes"])
    
    with tab1:
        st.subheader("Produtos Qu√≠micos")
        if "quimicos" not in dados or dados["quimicos"].empty:
            st.error("Erro ao carregar dados dos produtos qu√≠micos!")
        else:
            # Op√ß√µes para o usu√°rio escolher entre registrar ou visualizar
            opcao = st.radio("Escolha uma op√ß√£o:", ["Novo produto", "Produtos cadastrados"], key="opcao_quimicos")
            
            if opcao == "Novo produto":
                # Inicializar vari√°veis de estado se n√£o existirem
                if 'quimico_form_submitted' not in st.session_state:
                    st.session_state.quimico_form_submitted = False
                if 'quimico_form_success' not in st.session_state:
                    st.session_state.quimico_form_success = False
                if 'quimico_form_error' not in st.session_state:
                    st.session_state.quimico_form_error = ""
                if 'quimico_just_submitted' not in st.session_state:
                    st.session_state.quimico_just_submitted = False
                
                # Fun√ß√£o para processar o envio do formul√°rio
                def submit_quimico_form():
                    nome = st.session_state.quimico_nome
                    tipo = st.session_state.tipo_quimico
                    fabricante = st.session_state.quimico_fabricante
                    concentracao = st.session_state.quimico_concentracao
                    classe = st.session_state.quimico_classe
                    modo_acao = st.session_state.quimico_modo_acao
                    
                    if nome:
                        novo_produto = {
                            "Nome": nome,
                            "Tipo": tipo,
                            "Fabricante": fabricante,
                            "Concentracao": concentracao,
                            "Classe": classe,
                            "ModoAcao": modo_acao
                        }
                        
                        # Verificar se o produto j√° existe
                        if nome in dados["quimicos"]["Nome"].values:
                            st.session_state.quimico_form_submitted = True
                            st.session_state.quimico_form_success = False
                            st.session_state.quimico_form_error = f"Produto '{nome}' j√° existe!"
                        else:
                            # Adicionar √† planilha
                            if append_to_sheet(novo_produto, "Quimicos"):
                                # Atualizar dados locais
                                nova_linha = pd.DataFrame([novo_produto])
                                st.session_state.local_data["quimicos"] = pd.concat([st.session_state.local_data["quimicos"], nova_linha], ignore_index=True)
                                
                                st.session_state.quimico_form_submitted = True
                                st.session_state.quimico_form_success = True
                                st.session_state.quimico_form_error = ""
                                st.session_state.quimico_just_submitted = True
                                # Garantir que permanecemos na p√°gina atual
                                st.session_state.current_page = "Gerenciamento"
                            else:
                                st.session_state.quimico_form_submitted = True
                                st.session_state.quimico_form_success = False
                                st.session_state.quimico_form_error = "Falha ao adicionar produto"
                    else:
                        st.session_state.quimico_form_submitted = True
                        st.session_state.quimico_form_success = False
                        st.session_state.quimico_form_error = "Nome do produto √© obrigat√≥rio"
                
                with st.form("novo_quimico_form"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_input("Nome do Produto", key="quimico_nome")
                        st.selectbox("Tipo", options=["Herbicida", "Fungicida", "Inseticida"], key="tipo_quimico")
                        st.text_input("Fabricante", key="quimico_fabricante")
                    with col2:
                        st.number_input("Concentra√ß√£o", value=0.0, step=1.0, key="quimico_concentracao")
                        st.text_input("Classe", key="quimico_classe")
                        st.text_input("Modo de A√ß√£o", key="quimico_modo_acao")
                    
                    submitted = st.form_submit_button("Adicionar Produto", on_click=submit_quimico_form)
                
                # Mostrar mensagens de sucesso ou erro abaixo do formul√°rio
                if st.session_state.quimico_form_submitted:
                    if st.session_state.quimico_form_success:
                        # Usar um container para destacar a mensagem de sucesso
                        success_container = st.container()
                        with success_container:
                            st.markdown("---")
                            st.success("### Produto adicionado com sucesso! ‚úÖ")
                            st.markdown("---")
                        
                        # Bot√£o para limpar o formul√°rio e adicionar outro produto
                        if st.button("Adicionar outro produto", key="btn_add_outro_quimico"):
                            st.session_state.quimico_form_submitted = False
                            st.session_state.quimico_form_success = False
                            st.session_state.quimico_just_submitted = False
                            st.experimental_rerun()
                    else:
                        st.error(st.session_state.quimico_form_error)
            
            else:  # Visualizar produtos cadastrados
                # Filtros para a tabela
                col1, col2 = st.columns(2)
                with col1:
                    filtro_nome = st.selectbox(
                        "üîç Filtrar por Nome",
                        options=["Todos"] + sorted(dados["quimicos"]['Nome'].unique().tolist()),
                        index=0,
                        key="filtro_nome_quimicos"
                    )
                with col2:
                    filtro_tipo = st.selectbox(
                        "üîç Filtrar por Tipo",
                        options=["Todos", "Herbicida", "Fungicida", "Inseticida"],
                        index=0,
                        key="filtro_tipo_quimicos"
                    )

                # Aplicar filtro
                df_filtrado = dados["quimicos"].copy()
                if filtro_nome != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Nome"] == filtro_nome]
                if filtro_tipo != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Tipo"] == filtro_tipo]
                
                # Garantir que apenas as colunas esperadas estejam presentes
                df_filtrado = df_filtrado[COLUNAS_ESPERADAS["Quimicos"]].copy()
                
                # Garantir que o DataFrame tenha pelo menos uma linha vazia para adi√ß√£o
                if df_filtrado.empty:
                    df_vazio = pd.DataFrame(columns=COLUNAS_ESPERADAS["Quimicos"])
                    # Adicionar uma linha vazia para facilitar a adi√ß√£o de novos dados
                    df_filtrado = df_vazio
                
                # Definir fun√ß√£o para marcar dados como editados
                def marcar_como_editado(tabela):
                    st.session_state.edited_data[tabela] = True
                
                # Tabela edit√°vel
                edited_df = st.data_editor(
                    df_filtrado,
                    num_rows="dynamic",
                    key=f"quimicos_editor_{filtro_nome}_{filtro_tipo}",
                    hide_index=True,
                    on_change=lambda: st.session_state.edited_data.update({"quimicos": True}),
                    disabled=["Nome"] if not df_filtrado.empty else [],
                    column_config={
                        "Nome": st.column_config.TextColumn("Nome do Produto", required=True),
                        "Tipo": st.column_config.SelectboxColumn(options=["Herbicida", "Fungicida", "Inseticida"]),
                        "Fabricante": "Fabricante",
                        "Concentracao": "Concentra√ß√£o",
                        "Classe": "Classe",
                        "ModoAcao": "Modo de A√ß√£o"
                    },
                    use_container_width=True,
                    height=400
                )
                
                # Bot√£o para salvar altera√ß√µes
                col_btn = st.container()
                with col_btn:
                    if st.button("Salvar Altera√ß√µes", key="save_quimicos", use_container_width=True):
                        with st.spinner("Salvando dados..."):
                            try:
                                # Verificar se √© um DataFrame
                                if not isinstance(edited_df, pd.DataFrame):
                                    st.error("Erro: Os dados editados n√£o s√£o um DataFrame v√°lido")
                                    st.stop()
                                
                                # Garantir que todas as colunas necess√°rias estejam presentes
                                for col in COLUNAS_ESPERADAS["Quimicos"]:
                                    if col not in edited_df.columns:
                                        st.error(f"Coluna obrigat√≥ria '{col}' n√£o encontrada nos dados editados")
                                        st.stop()
                                
                                # Remover linhas vazias
                                edited_df = edited_df.dropna(subset=["Nome"], how="all").reset_index(drop=True)
                                
                                # Verificar se h√° dados para salvar
                                if edited_df.empty:
                                    st.warning("N√£o h√° dados para salvar")
                                    st.stop()
                                
                                # Atualizar dados na sess√£o
                                st.session_state.local_data["quimicos"] = edited_df
                                
                                # Depois enviar para o Google Sheets
                                if update_sheet(edited_df, "Quimicos"):
                                    st.session_state.edited_data["quimicos"] = False
                                    st.success("Dados salvos com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao salvar altera√ß√µes: {str(e)}")
    
    with tab2:
        st.subheader("Produtos Biol√≥gicos")
        if "biologicos" not in dados or dados["biologicos"].empty:
            st.error("Erro ao carregar dados dos produtos biol√≥gicos!")
        else:
            # Op√ß√µes para o usu√°rio escolher entre registrar ou visualizar
            opcao = st.radio("Escolha uma op√ß√£o:", ["Novo produto", "Produtos cadastrados"], key="opcao_biologicos")
            
            if opcao == "Novo produto":
                # Inicializar vari√°veis de estado se n√£o existirem
                if 'biologico_form_submitted' not in st.session_state:
                    st.session_state.biologico_form_submitted = False
                if 'biologico_form_success' not in st.session_state:
                    st.session_state.biologico_form_success = False
                if 'biologico_form_error' not in st.session_state:
                    st.session_state.biologico_form_error = ""
                
                # Fun√ß√£o para processar o envio do formul√°rio
                def submit_biologico_form():
                    nome = st.session_state.biologico_nome
                    tipo = st.session_state.tipo_biologico
                    ingrediente_ativo = st.session_state.biologico_ingrediente
                    formulacao = st.session_state.biologico_formulacao
                    aplicacao = st.session_state.biologico_aplicacao
                    validade = st.session_state.biologico_validade
                    
                    if nome:
                        novo_produto = {
                            "Nome": nome,
                            "Tipo": tipo,
                            "IngredienteAtivo": ingrediente_ativo,
                            "Formulacao": formulacao,
                            "Aplicacao": aplicacao,
                            "Validade": validade
                        }
                        
                        # Verificar se o produto j√° existe
                        if nome in dados["biologicos"]["Nome"].values:
                            st.session_state.biologico_form_submitted = True
                            st.session_state.biologico_form_success = False
                            st.session_state.biologico_form_error = f"Produto '{nome}' j√° existe!"
                        else:
                            # Adicionar √† planilha
                            if append_to_sheet(novo_produto, "Biologicos"):
                                # Atualizar dados locais
                                nova_linha = pd.DataFrame([novo_produto])
                                st.session_state.local_data["biologicos"] = pd.concat([st.session_state.local_data["biologicos"], nova_linha], ignore_index=True)
                                
                                st.session_state.biologico_form_submitted = True
                                st.session_state.biologico_form_success = True
                                st.session_state.biologico_form_error = ""
                            else:
                                st.session_state.biologico_form_submitted = True
                                st.session_state.biologico_form_success = False
                                st.session_state.biologico_form_error = "Falha ao adicionar produto"
                    else:
                        st.session_state.biologico_form_submitted = True
                        st.session_state.biologico_form_success = False
                        st.session_state.biologico_form_error = "Nome do produto √© obrigat√≥rio"
                
                with st.form("novo_biologico_form"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_input("Nome do Produto", key="biologico_nome")
                        st.selectbox("Tipo", options=["Bioestimulante", "Controle Biol√≥gico"], key="tipo_biologico")
                        st.text_input("Ingrediente Ativo", key="biologico_ingrediente")
                    with col2:
                        st.text_input("Formula√ß√£o", key="biologico_formulacao")
                        st.text_input("Aplica√ß√£o", key="biologico_aplicacao")
                        st.text_input("Validade", key="biologico_validade")
                    
                    submitted = st.form_submit_button("Adicionar Produto", on_click=submit_biologico_form)
                
                # Mostrar mensagens de sucesso ou erro abaixo do formul√°rio
                if st.session_state.biologico_form_submitted:
                    if st.session_state.biologico_form_success:
                        # Usar um container para destacar a mensagem de sucesso
                        success_container = st.container()
                        with success_container:
                            st.markdown("---")
                            st.success("### Produto biol√≥gico adicionado com sucesso! ‚úÖ")
                            st.markdown("---")
                    else:
                        st.error(st.session_state.biologico_form_error)
            
            else:  # Visualizar produtos cadastrados
                # Filtros para a tabela
                col1, col2 = st.columns(2)
                with col1:
                    filtro_nome = st.selectbox(
                        "üîç Filtrar por Nome",
                        options=["Todos"] + sorted(dados["biologicos"]['Nome'].unique().tolist()),
                        index=0,
                        key="filtro_nome_biologicos"
                    )
                with col2:
                    filtro_tipo = st.selectbox(
                        "üîç Filtrar por Tipo",
                        options=["Todos", "Bioestimulante", "Controle Biol√≥gico"],
                        index=0,
                        key="filtro_tipo_biologicos"
                    )

                # Aplicar filtro
                df_filtrado = dados["biologicos"].copy()
                if filtro_nome != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Nome"] == filtro_nome]
                if filtro_tipo != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Tipo"] == filtro_tipo]
                
                # Garantir que apenas as colunas esperadas estejam presentes
                df_filtrado = df_filtrado[COLUNAS_ESPERADAS["Biologicos"]].copy()
                
                # Garantir que o DataFrame tenha pelo menos uma linha vazia para adi√ß√£o
                if df_filtrado.empty:
                    df_vazio = pd.DataFrame(columns=COLUNAS_ESPERADAS["Biologicos"])
                    # Adicionar uma linha vazia para facilitar a adi√ß√£o de novos dados
                    df_filtrado = df_vazio
                
                # Tabela edit√°vel
                edited_df = st.data_editor(
                    df_filtrado,
                    num_rows="dynamic",
                    key=f"biologicos_editor_{filtro_nome}_{filtro_tipo}",
                    hide_index=True,
                    on_change=lambda: st.session_state.edited_data.update({"biologicos": True}),
                    column_config={
                        "Nome": "Produto Biol√≥gico",
                        "Tipo": st.column_config.SelectboxColumn(options=["Bioestimulante", "Controle Biol√≥gico"]),
                        "IngredienteAtivo": "Ingrediente Ativo",
                        "Formulacao": "Formula√ß√£o",
                        "Aplicacao": "Aplica√ß√£o",
                        "Validade": "Validade"
                    },
                    use_container_width=True,
                    height=400
                )
                
                # Bot√£o para salvar altera√ß√µes
                col_btn = st.container()
                with col_btn:
                    if st.button("Salvar Altera√ß√µes", key="save_biologicos", use_container_width=True):
                        with st.spinner("Salvando dados..."):
                            try:
                                # Verificar se √© um DataFrame
                                if not isinstance(edited_df, pd.DataFrame):
                                    st.error("Erro: Os dados editados n√£o s√£o um DataFrame v√°lido")
                                    st.stop()
                                
                                # Garantir que todas as colunas necess√°rias estejam presentes
                                for col in COLUNAS_ESPERADAS["Biologicos"]:
                                    if col not in edited_df.columns:
                                        st.error(f"Coluna obrigat√≥ria '{col}' n√£o encontrada nos dados editados")
                                        st.stop()
                                
                                # Remover linhas vazias
                                edited_df = edited_df.dropna(subset=["Nome"], how="all").reset_index(drop=True)
                                
                                # Verificar se h√° dados para salvar
                                if edited_df.empty:
                                    st.warning("N√£o h√° dados para salvar")
                                    st.stop()
                                
                                # Atualizar dados na sess√£o
                                st.session_state.local_data["biologicos"] = edited_df
                                
                                # Depois enviar para o Google Sheets
                                if update_sheet(edited_df, "Biologicos"):
                                    st.session_state.edited_data["biologicos"] = False
                                    st.success("Dados salvos com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao salvar altera√ß√µes: {str(e)}")
    
    with tab3:
        st.subheader("Resultados de Compatibilidade")
        if "resultados" not in dados or dados["resultados"].empty:
            st.error("Erro ao carregar dados dos resultados!")
        else:
            # Op√ß√µes para o usu√°rio escolher entre registrar ou visualizar
            opcao = st.radio("Escolha uma op√ß√£o:", ["Nova compatibilidade", "Compatibilidades cadastradas"], key="opcao_compat")
            
            if opcao == "Nova compatibilidade":
                # Inicializar vari√°veis de estado se n√£o existirem
                if 'compatibilidade_form_submitted' not in st.session_state:
                    st.session_state.compatibilidade_form_submitted = False
                if 'compatibilidade_form_success' not in st.session_state:
                    st.session_state.compatibilidade_form_success = False
                if 'compatibilidade_form_error' not in st.session_state:
                    st.session_state.compatibilidade_form_error = ""
                
                # Fun√ß√£o para processar o envio do formul√°rio
                def submit_compatibilidade_form():
                    quimico = st.session_state.resultado_quimico
                    biologico = st.session_state.resultado_biologico
                    data_teste = st.session_state.resultado_data
                    duracao = st.session_state.resultado_duracao
                    tipo = st.session_state.resultado_tipo
                    resultado = st.session_state.resultado_status
                    
                    if quimico and biologico:
                        nova_compatibilidade = {
                            "Data": data_teste.strftime("%Y-%m-%d"),
                            "Quimico": quimico,
                            "Biologico": biologico,
                            "Duracao": duracao,
                            "Tipo": tipo,
                            "Resultado": resultado
                        }
                        
                        # Verificar se a combina√ß√£o j√° existe
                        combinacao_existente = dados["resultados"][
                            (dados["resultados"]["Quimico"] == quimico) & 
                            (dados["resultados"]["Biologico"] == biologico)
                        ]
                        
                        if not combinacao_existente.empty:
                            st.session_state.compatibilidade_form_submitted = True
                            st.session_state.compatibilidade_form_success = False
                            st.session_state.compatibilidade_form_error = f"Combina√ß√£o {quimico} e {biologico} j√° existe!"
                        else:
                            # Adicionar √† planilha
                            if append_to_sheet(nova_compatibilidade, "Resultados"):
                                # Atualizar dados locais
                                nova_linha = pd.DataFrame([nova_compatibilidade])
                                st.session_state.local_data["resultados"] = pd.concat([st.session_state.local_data["resultados"], nova_linha], ignore_index=True)
                                
                                st.session_state.compatibilidade_form_submitted = True
                                st.session_state.compatibilidade_form_success = True
                                st.session_state.compatibilidade_form_error = ""
                                # Garantir que permanecemos na p√°gina atual
                                st.session_state.current_page = "Gerenciamento"
                            else:
                                st.session_state.compatibilidade_form_submitted = True
                                st.session_state.compatibilidade_form_success = False
                                st.session_state.compatibilidade_form_error = "Falha ao adicionar compatibilidade"
                    else:
                        st.session_state.compatibilidade_form_submitted = True
                        st.session_state.compatibilidade_form_success = False
                        st.session_state.compatibilidade_form_error = "Selecione os produtos qu√≠mico e biol√≥gico"
                
                with st.form("nova_compatibilidade_form"):
                    col_a, col_b = st.columns(2)
                    with col_a:
                        st.selectbox(
                            "Produto Qu√≠mico",
                            options=sorted(dados["quimicos"]["Nome"].unique().tolist()),
                            key="resultado_quimico"
                        )
                        st.date_input("Data do Teste", key="resultado_data")
                        st.selectbox("Tipo de Teste", options=["Simples", "Composto"], key="resultado_tipo")
                    with col_b:
                        st.selectbox(
                            "Produto Biol√≥gico",
                            options=sorted(dados["biologicos"]["Nome"].unique().tolist()),
                            key="resultado_biologico"
                        )
                        st.number_input("Dura√ß√£o (horas)", min_value=0, value=0, key="resultado_duracao")
                        st.selectbox("Resultado", options=["Compat√≠vel", "Incompat√≠vel"], key="resultado_status")
                    
                    submitted = st.form_submit_button("Adicionar Compatibilidade", on_click=submit_compatibilidade_form)
                
                # Mostrar mensagens de sucesso ou erro abaixo do formul√°rio
                if st.session_state.compatibilidade_form_submitted:
                    if st.session_state.compatibilidade_form_success:
                        st.success("Compatibilidade adicionada com sucesso!")
                    else:
                        st.error(st.session_state.compatibilidade_form_error)
            
            else:  # Visualizar compatibilidades cadastradas
                # Filtros para a tabela
                col1, col2 = st.columns(2)
                with col1:
                    filtro_quimico = st.selectbox(
                        "üîç Filtrar por Produto Qu√≠mico",
                        options=["Todos"] + sorted(dados["resultados"]["Quimico"].unique().tolist()),
                        index=0,
                        key="filtro_quimico_resultados"
                    )
                with col2:
                    filtro_biologico = st.selectbox(
                        "üîç Filtrar por Produto Biol√≥gico",
                        options=["Todos"] + sorted(dados["resultados"]["Biologico"].unique().tolist()),
                        index=0,
                        key="filtro_biologico_resultados"
                    )
                
                # Aplicar filtros
                df_filtrado = dados["resultados"].copy()
                if filtro_quimico != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Quimico"] == filtro_quimico]
                if filtro_biologico != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Biologico"] == filtro_biologico]
                
                # Garantir que apenas as colunas esperadas estejam presentes
                df_filtrado = df_filtrado[COLUNAS_ESPERADAS["Resultados"]].copy()
                
                # Garantir que o DataFrame tenha pelo menos uma linha vazia para adi√ß√£o
                if df_filtrado.empty:
                    df_vazio = pd.DataFrame(columns=COLUNAS_ESPERADAS["Resultados"])
                    # Adicionar uma linha vazia para facilitar a adi√ß√£o de novos dados
                    df_filtrado = df_vazio
                
                # Garantir que a coluna Data seja do tipo correto
                if 'Data' in df_filtrado.columns:
                    # Converter para string para evitar problemas de compatibilidade
                    df_filtrado['Data'] = df_filtrado['Data'].astype(str)
                
                # Tabela edit√°vel
                edited_df = st.data_editor(
                    df_filtrado,
                    num_rows="dynamic",
                    key=f"resultados_editor_{filtro_quimico}_{filtro_biologico}",
                    hide_index=True,
                    on_change=lambda: st.session_state.edited_data.update({"resultados": True}),
                    column_config={
                        "Data": st.column_config.TextColumn(
                            "Data do Teste",
                            required=True
                        ),
                        "Quimico": st.column_config.SelectboxColumn(
                            "Produto Qu√≠mico",
                            options=sorted(dados["quimicos"]["Nome"].unique().tolist()),
                            required=True
                        ),
                        "Biologico": st.column_config.SelectboxColumn(
                            "Produto Biol√≥gico",
                            options=sorted(dados["biologicos"]["Nome"].unique().tolist()),
                            required=True
                        ),
                        "Duracao": st.column_config.NumberColumn(
                            "Dura√ß√£o (horas)",
                            min_value=0,
                            default=0
                        ),
                        "Tipo": st.column_config.SelectboxColumn(
                            "Tipo de Teste",
                            options=["Simples", "Composto"],
                            required=True
                        ),
                        "Resultado": st.column_config.SelectboxColumn(
                            "Resultado",
                            options=["Compat√≠vel", "Incompat√≠vel"],
                            required=True
                        )
                    },
                    use_container_width=True,
                    height=400
                )
                
                # Bot√£o para salvar altera√ß√µes
                col_btn = st.container()
                with col_btn:
                    if st.button("Salvar Altera√ß√µes", key="save_resultados", use_container_width=True):
                        with st.spinner("Salvando dados..."):
                            try:
                                # Verificar se √© um DataFrame
                                if not isinstance(edited_df, pd.DataFrame):
                                    st.error("Erro: Os dados editados n√£o s√£o um DataFrame v√°lido")
                                    st.stop()
                                
                                # Garantir que todas as colunas necess√°rias estejam presentes
                                for col in COLUNAS_ESPERADAS["Resultados"]:
                                    if col not in edited_df.columns:
                                        st.error(f"Coluna obrigat√≥ria '{col}' n√£o encontrada nos dados editados")
                                        st.stop()
                                
                                # Remover linhas vazias
                                edited_df = edited_df.dropna(subset=["Quimico", "Biologico"], how="all").reset_index(drop=True)
                                
                                # Verificar se h√° dados para salvar
                                if edited_df.empty:
                                    st.warning("N√£o h√° dados para salvar")
                                    st.stop()
                                
                                # Atualizar dados na sess√£o
                                st.session_state.local_data["resultados"] = edited_df
                                
                                # Depois enviar para o Google Sheets
                                if update_sheet(edited_df, "Resultados"):
                                    st.session_state.edited_data["resultados"] = False
                                    st.success("Dados salvos com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao salvar altera√ß√µes: {str(e)}")
    
    with tab4:
        st.subheader("Solicita√ß√µes")
        if "solicitacoes" not in dados or dados["solicitacoes"].empty:
            st.warning("Sem solicita√ß√µes para exibir")
        else:
            # Op√ß√µes para o usu√°rio escolher entre registrar ou visualizar
            opcao = st.radio("Escolha uma op√ß√£o:", ["Nova solicita√ß√£o", "Solicita√ß√µes cadastradas"], key="opcao_solicitacoes")
            
            if opcao == "Nova solicita√ß√£o":
                # Inicializar vari√°veis de estado se n√£o existirem
                if 'gerenciamento_form_submitted' not in st.session_state:
                    st.session_state.gerenciamento_form_submitted = False
                
                # Se o formul√°rio foi enviado com sucesso, mostrar mensagem e detalhes
                if st.session_state.gerenciamento_form_submitted and 'gerenciamento_last_submission' in st.session_state:
                    st.success("Solicita√ß√£o adicionada com sucesso!")
                    
                    # Mostrar detalhes da solicita√ß√£o
                    st.info("**Detalhes da solicita√ß√£o:**")
                    st.write(f"**Data:** {st.session_state.gerenciamento_last_submission.get('Data', '')}")
                    st.write(f"**Solicitante:** {st.session_state.gerenciamento_last_submission.get('Solicitante', '')}")
                    st.write(f"**Produto Qu√≠mico:** {st.session_state.gerenciamento_last_submission.get('Quimico', '')}")
                    st.write(f"**Produto Biol√≥gico:** {st.session_state.gerenciamento_last_submission.get('Biologico', '')}")
                    
                    if st.button("Fazer nova solicita√ß√£o", key="btn_nova_solicitacao_gerenciamento"):
                        st.session_state.gerenciamento_form_submitted = False
                        if 'gerenciamento_last_submission' in st.session_state:
                            del st.session_state.gerenciamento_last_submission
                    return
                
                # Fun√ß√£o para processar o envio do formul√°rio
                def submit_gerenciamento_form():
                    # Obter valores do formul√°rio
                    data = st.session_state.gerenciamento_data
                    solicitante = st.session_state.gerenciamento_solicitante
                    quimico = st.session_state.gerenciamento_quimico
                    biologico = st.session_state.gerenciamento_biologico
                    observacoes = st.session_state.gerenciamento_observacoes
                    
                    # Validar campos obrigat√≥rios
                    if not solicitante or not quimico or not biologico:
                        st.warning("Preencha todos os campos obrigat√≥rios")
                        return
                    
                    # Preparar dados da solicita√ß√£o
                    nova_solicitacao = {
                        "Data": data.strftime("%Y-%m-%d"),
                        "Solicitante": solicitante,
                        "Quimico": quimico,
                        "Biologico": biologico,
                        "Observacoes": observacoes,
                        "Status": "Pendente"
                    }
                    
                    # Adicionar √† planilha
                    with st.spinner("Salvando nova solicita√ß√£o..."):
                        if append_to_sheet(nova_solicitacao, "Solicitacoes"):
                            # Atualizar dados locais
                            nova_linha = pd.DataFrame([nova_solicitacao])
                            st.session_state.local_data["solicitacoes"] = pd.concat([st.session_state.local_data["solicitacoes"], nova_linha], ignore_index=True)
                            
                            # Salvar a √∫ltima submiss√£o para exibir detalhes
                            st.session_state.gerenciamento_last_submission = nova_solicitacao
                            # Marcar como enviado com sucesso
                            st.session_state.gerenciamento_form_submitted = True
                            # Garantir que permanecemos na p√°gina atual
                            st.session_state.current_page = "Gerenciamento"
                        else:
                            st.error("Falha ao adicionar solicita√ß√£o")
                            return False
                
                # Mostrar o formul√°rio para entrada de dados
                st.subheader("Nova Solicita√ß√£o de Teste")
                
                # Usar st.form para evitar recarregamentos
                with st.form(key="gerenciamento_form"):
                    col1, col2 = st.columns(2)
                    with col1:
                        st.text_input("Nome do solicitante", key="gerenciamento_solicitante")
                        st.text_input("Produto Qu√≠mico", key="gerenciamento_quimico")
                    with col2:
                        st.date_input("Data da Solicita√ß√£o", value=datetime.now(), key="gerenciamento_data")
                        st.text_input("Produto Biol√≥gico", key="gerenciamento_biologico")
                    
                    st.text_area("Observa√ß√µes", key="gerenciamento_observacoes")
                    
                    # Bot√£o de submit
                    submitted = st.form_submit_button("Adicionar Solicita√ß√£o", on_click=submit_gerenciamento_form)
            
            else:  # Solicita√ß√µes cadastradas
                # Filtros para a tabela
                col1, col2, col3 = st.columns(3)
                with col1:
                    filtro_status = st.selectbox(
                        "üîç Filtrar por Status",
                        options=["Todos", "Pendente", "Em andamento", "Conclu√≠do", "Cancelado"],
                        index=0,
                        key="filtro_status_solicitacoes"
                    )
                with col2:
                    filtro_quimico = st.selectbox(
                        "üîç Filtrar por Produto Qu√≠mico",
                        options=["Todos"] + sorted(dados["solicitacoes"]["Quimico"].unique().tolist()),
                        index=0,
                        key="filtro_quimico_solicitacoes"
                    )
                with col3:
                    filtro_biologico = st.selectbox(
                        "üîç Filtrar por Produto Biol√≥gico",
                        options=["Todos"] + sorted(dados["solicitacoes"]["Biologico"].unique().tolist()),
                        index=0,
                        key="filtro_biologico_solicitacoes"
                    )
                
                # Aplicar filtros
                if not dados["solicitacoes"].empty:
                    df_filtrado = dados["solicitacoes"].copy()
                else:
                    df_filtrado = pd.DataFrame()

                if filtro_status != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Status"] == filtro_status]
                if filtro_quimico != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Quimico"] == filtro_quimico]
                if filtro_biologico != "Todos":
                    df_filtrado = df_filtrado[df_filtrado["Biologico"] == filtro_biologico]
                
                # Garantir que apenas as colunas esperadas estejam presentes
                df_filtrado = df_filtrado[COLUNAS_ESPERADAS["Solicitacoes"]].copy()
                
                # Garantir que o DataFrame tenha pelo menos uma linha vazia para adi√ß√£o
                if df_filtrado.empty:
                    df_vazio = pd.DataFrame(columns=COLUNAS_ESPERADAS["Solicitacoes"])
                    # Adicionar uma linha vazia para facilitar a adi√ß√£o de novos dados
                    df_filtrado = df_vazio
                
                # Garantir que a coluna Data seja do tipo correto
                if 'Data' in df_filtrado.columns:
                    # Converter para string para evitar problemas de compatibilidade
                    df_filtrado['Data'] = df_filtrado['Data'].astype(str)
                
                # Tabela edit√°vel com ordena√ß√£o por Data
                if not df_filtrado.empty:
                    df_filtrado = df_filtrado.sort_values(by="Data", ascending=False).reset_index(drop=True)
                
                edited_df = st.data_editor(
                    df_filtrado,
                    num_rows="dynamic",
                    key=f"solicitacoes_editor_{filtro_status}_{filtro_quimico}_{filtro_biologico}",
                    hide_index=True,
                    on_change=lambda: st.session_state.edited_data.update({"solicitacoes": True}),
                    column_config={
                        "Data": st.column_config.TextColumn("Data da Solicita√ß√£o"),
                        "Solicitante": "Solicitante",
                        "Quimico": st.column_config.SelectboxColumn(
                            "Produto Qu√≠mico",
                            options=sorted(dados["quimicos"]["Nome"].unique().tolist())
                        ),
                        "Biologico": st.column_config.SelectboxColumn(
                            "Produto Biol√≥gico",
                            options=sorted(dados["biologicos"]["Nome"].unique().tolist())
                        ),
                        "Observacoes": "Observa√ß√µes",
                        "Status": st.column_config.SelectboxColumn(
                            "Status",
                            options=["Pendente", "Em An√°lise", "Conclu√≠do", "Cancelado"]
                        )
                    },
                    use_container_width=True,
                    height=400
                )
                
                # Bot√£o para salvar altera√ß√µes
                col_btn = st.container()
                with col_btn:
                    if st.button("Salvar Altera√ß√µes", key="save_solicitacoes", use_container_width=True):
                        with st.spinner("Salvando dados..."):
                            try:
                                # Verificar se √© um DataFrame
                                if not isinstance(edited_df, pd.DataFrame):
                                    st.error("Erro: Os dados editados n√£o s√£o um DataFrame v√°lido")
                                    st.stop()
                                
                                # Garantir que todas as colunas necess√°rias estejam presentes
                                for col in COLUNAS_ESPERADAS["Solicitacoes"]:
                                    if col not in edited_df.columns:
                                        st.error(f"Coluna obrigat√≥ria '{col}' n√£o encontrada nos dados editados")
                                        st.stop()
                                
                                # Remover linhas vazias
                                edited_df = edited_df.dropna(subset=["Solicitante"], how="all").reset_index(drop=True)
                                
                                # Verificar se h√° dados para salvar
                                if edited_df.empty:
                                    st.warning("N√£o h√° dados para salvar")
                                    st.stop()
                                
                                # Atualizar dados na sess√£o
                                st.session_state.local_data["solicitacoes"] = edited_df
                                
                                # Depois enviar para o Google Sheets
                                if update_sheet(edited_df, "Solicitacoes"):
                                    st.session_state.edited_data["solicitacoes"] = False
                                    st.success("Dados salvos com sucesso!")
                            except Exception as e:
                                st.error(f"Erro ao salvar altera√ß√µes: {str(e)}")

########################################## SIDEBAR ##########################################

def main():
    if 'local_data' not in st.session_state:
        st.session_state.local_data = {
            "quimicos": pd.DataFrame(),
            "biologicos": pd.DataFrame(),
            "resultados": pd.DataFrame(),
            "solicitacoes": pd.DataFrame()
        }
    
    # Inicializar a p√°gina atual se n√£o existir
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "Compatibilidade"

    st.sidebar.image("imagens/logo-cocal.png")
    st.sidebar.title("Menu")
    
    # Usar o estado atual para definir o valor padr√£o do radio
    menu_option = st.sidebar.radio(
        "Selecione a funcionalidade:",
        ("Compatibilidade", "Gerenciamento"),
        index=0 if st.session_state.current_page == "Compatibilidade" else 1
    )
    
    # Atualizar o estado da p√°gina atual
    st.session_state.current_page = menu_option

    st.sidebar.markdown("---")

    if menu_option == "Compatibilidade":
        compatibilidade()
    elif menu_option == "Gerenciamento":
        gerenciamento()

########################################## EXECU√á√ÉO ##########################################

if __name__ == "__main__":
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = True

    try:
        if st.session_state["logged_in"]:
            main()
    except Exception as e:
        st.error(f"Erro ao executar a aplica√ß√£o: {e}")
        st.stop()